roslaunch_package: odometry_evaluation # Ros package that contains the launch file for odometry evaluation
roslaunch_file: odometry_evaluation.launch # The roslaunch file to launch the odometry evaluation
ros_topic: /stereo_odometer/odometry # Topic to be listened to capture the visual odometry output. The message type of this topic must be nav_msgs::Odometry)
gt_file: data/gt/cirs-timefixed-run3.txt # The ground truth (gt) file to validate the odometry (used to compute the errors between gt and odometry estimation)
sample_step: 0.05 # Distance to sample equally the gt and odometry data
brute: True # True to apply brute force and try all possible combinations. False to apply an optimization function
max_iter: 3 # Maximum number of iterations in the optimization algorithm (only if brute = False)
error_to_min: 0 # 0 to minimize translation error, 1 to minimize rotation error
save_output_file: output/optimization_report.txt
param_name: # Parameter name (in ros parameter server) to be tunned.
 0: /stereo_odometer/nms_n
 1: /stereo_odometer/nms_tau
 2: /stereo_odometer/match_binsize
 3: /stereo_odometer/match_radius
 4: /stereo_odometer/match_disp_tolerance
 5: /stereo_odometer/outlier_disp_tolerance
 6: /stereo_odometer/outlier_flow_tolerance
 7: /stereo_odometer/max_features
 8: /stereo_odometer/ransac_iters
 9: /stereo_odometer/inlier_threshold
param_min: # Minimum value for the parameter
 0: 1
 1: 40
 2: 40
 3: 150
 4: 1
 5: 1
 6: 1
 7: 1
 8: 150
 9: 0.2
param_max: # Maximum value for the parameter
 0: 6
 1: 60
 2: 60
 3: 250
 4: 6
 5: 10
 6: 10
 7: 6
 8: 250
 9: 4
param_step: # Step size (only if brute = True)
 0: 1
 1: 1
 2: 1
 3: 2
 4: 1
 5: 1
 6: 1
 7: 1
 8: 2
 9: 0.2